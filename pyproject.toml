[tool.poetry]
name = "prism-core"
version = "0.1.0"
description = "Open source AI-powered product management platform"
authors = ["PRISM Community <community@prism-ai.dev>"]
license = "MIT"
readme = "README.md"
homepage = "https://prism-ai.dev"
repository = "https://github.com/prism-ai/prism"
documentation = "https://docs.prism-ai.dev"
keywords = ["product-management", "ai", "llm", "automation", "agile"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Office/Business :: Project Management",
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.110.0"
uvicorn = {extras = ["standard"], version = "^0.27.0"}
pydantic = "^2.6.0"
pydantic-settings = "^2.1.0"
sqlalchemy = "^2.0.25"
alembic = "^1.13.1"
asyncpg = "^0.29.0"
greenlet = "^3.0.1"
redis = "^5.0.1"
celery = "^5.3.4"
langchain = "^0.1.0"
langchain-community = "^0.0.10"
langchain-openai = "^0.0.5"
langchain-anthropic = "^0.1.1"
openai = "^1.12.0"
anthropic = "^0.18.0"
qdrant-client = "^1.7.0"
httpx = "^0.26.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
email-validator = "^2.1.0"
structlog = "^24.1.0"
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.22.0"
opentelemetry-sdk = "^1.22.0"
opentelemetry-instrumentation-fastapi = "^0.43b0"
opentelemetry-exporter-otlp = "^1.22.0"
opentelemetry-instrumentation-httpx = "^0.43b0"
opentelemetry-instrumentation-redis = "^0.43b0"
opentelemetry-instrumentation-sqlalchemy = "^0.43b0"
sentry-sdk = {extras = ["fastapi"], version = "^1.40.0"}
tenacity = "^8.2.3"
python-dotenv = "^1.0.0"
orjson = "^3.9.10"
click = "^8.1.7"
rich = "^13.7.0"
aiosmtplib = "^3.0.1"
bleach = "^6.1.0"
jinja2 = "^3.1.3"
psutil = "^5.9.8"
boto3 = {version = "^1.34.0", optional = true}
sendgrid = {version = "^6.11.0", optional = true}
python-json-logger = "^3.3.0"
opentelemetry-instrumentation-asyncpg = "^0.43b0"
opentelemetry-instrumentation-celery = "^0.43b0"
opentelemetry-exporter-otlp-proto-grpc = "^1.22.0"
python-magic = "^0.4.27"

[tool.poetry.extras]
aws = ["boto3"]
sendgrid = ["sendgrid"]
email-providers = ["boto3", "sendgrid"]

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.23.3"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.5.0"
pytest-mock = "^3.12.0"
pytest-timeout = "^2.2.0"
pytest-benchmark = "^4.0.0"
aiosqlite = "^0.19.0"
black = "^24.1.0"
ruff = "^0.1.14"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
factory-boy = "^3.3.0"
faker = "^22.2.0"
httpx = "^0.26.0"
locust = "^2.20.0"
pytest-dotenv = "^0.5.2"
ipython = "^8.20.0"
ipdb = "^0.13.13"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.4"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

[tool.ruff]
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=backend/src --cov-report=html --cov-report=term"
testpaths = ["backend/tests"]
python_files = "test_*.py"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["backend/src"]
omit = ["*/tests/*", "*/migrations/*"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false