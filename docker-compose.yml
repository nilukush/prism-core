services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: prism-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-prism}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-prism_password}
      POSTGRES_DB: ${POSTGRES_DB:-prism_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-prism} -d ${POSTGRES_DB:-prism_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - prism-network

  # Redis Cache & Queue with Enterprise Persistence
  redis:
    image: redis:7-alpine
    container_name: prism-redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - prism-network
    environment:
      - REDIS_REPLICATION_MODE=master

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: prism-qdrant
    restart: unless-stopped
    ports:
      - "${QDRANT_PORT:-6334}:6333"
      - "${QDRANT_GRPC_PORT:-6335}:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__LOG_LEVEL: INFO
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__SERVICE__API_KEY: ${QDRANT_API_KEY:-}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - prism-network

  # PRISM Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: prism-backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Override database URLs for container networking
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-prism}:${POSTGRES_PASSWORD:-prism_password}@postgres:5432/${POSTGRES_DB:-prism_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
      QDRANT_URL: http://qdrant:6333
      # Development settings
      APP_ENV: development
      APP_DEBUG: "true"
      LOG_LEVEL: DEBUG
      # CORS settings
      CORS_ORIGINS: "http://localhost:3000,http://localhost:3001,http://localhost:3002,http://localhost:3003,http://localhost:3004,http://localhost:3100"
    ports:
      - "${API_PORT:-8100}:8000"
    volumes:
      - ./backend:/app/backend:cached
      - ./alembic.ini:/app/alembic.ini:ro
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - prism-network
    command: >
      sh -c "
        echo 'Waiting for services...' &&
        sleep 5 &&
        echo 'Running database migrations...' &&
        cd /app && alembic upgrade head || echo 'No migrations to run' &&
        echo 'Starting application...' &&
        uvicorn backend.src.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: prism-celery-worker
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-prism}:${POSTGRES_PASSWORD:-prism_password}@postgres:5432/${POSTGRES_DB:-prism_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
      QDRANT_URL: http://qdrant:6333
    volumes:
      - ./backend:/app/backend:cached
      - ./logs:/app/logs
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - prism-network
    command: celery -A backend.src.workers.celery_app worker --loglevel=info --concurrency=2

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: prism-celery-beat
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-prism}:${POSTGRES_PASSWORD:-prism_password}@postgres:5432/${POSTGRES_DB:-prism_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
    volumes:
      - ./backend:/app/backend:cached
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - prism-network
    command: celery -A backend.src.workers.celery_app beat --loglevel=info

  # Flower - Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: prism-flower
    restart: unless-stopped
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
    ports:
      - "${FLOWER_PORT:-5556}:5555"
    depends_on:
      - celery-worker
    networks:
      - prism-network
    command: celery -A backend.src.workers.celery_app flower

  # pgAdmin - PostgreSQL Web UI
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: prism-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@prism.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    ports:
      - "${PGADMIN_PORT:-5051}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - prism-network
    profiles:
      - tools

  # RedisInsight - Redis Web UI
  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: prism-redisinsight
    restart: unless-stopped
    ports:
      - "${REDISINSIGHT_PORT:-8002}:8001"
    volumes:
      - redisinsight_data:/db
    networks:
      - prism-network
    profiles:
      - tools

  # Frontend - Next.js Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8100}
        NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3100}
    container_name: prism-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3100}:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8100}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3100}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-nextauth-secret-here}
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
      - /app/.next
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - prism-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - frontend  # Run with --profile frontend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  pgadmin_data:
    driver: local
  redisinsight_data:
    driver: local

networks:
  prism-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.29.0.0/16