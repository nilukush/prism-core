#!/bin/bash

# PRISM Automated Free Tier Deployment Script
# This script helps automate the deployment process

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
print_success() { echo -e "${GREEN}✅ $1${NC}"; }
print_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
print_error() { echo -e "${RED}❌ $1${NC}"; }

# Banner
echo -e "${BLUE}"
echo "╔═══════════════════════════════════════╗"
echo "║     PRISM Free Tier Deployment        ║"
echo "║     Zero-Cost Production Setup        ║"
echo "╚═══════════════════════════════════════╝"
echo -e "${NC}"

# Check if we're in the right directory
if [ ! -d "backend" ] || [ ! -d "frontend" ] || [ ! -f "docker-compose.yml" ]; then
    print_error "Please run this script from the PRISM root directory"
    exit 1
fi

# Step 1: Environment Setup
setup_environment() {
    print_info "Setting up environment files..."
    
    # Generate secure keys
    SECRET_KEY=$(openssl rand -hex 32)
    JWT_SECRET=$(openssl rand -hex 32)
    NEXTAUTH_SECRET=$(openssl rand -hex 32)
    
    # Create .env.production if it doesn't exist
    if [ ! -f ".env.production" ]; then
        cat > .env.production <<EOF
# Generated by deploy-to-free-tier.sh
# Please update with your actual values

# Database (Neon PostgreSQL)
DATABASE_URL=postgresql://user:pass@host/neondb?sslmode=require

# Redis (Upstash)
UPSTASH_REDIS_REST_URL=https://your-instance.upstash.io
UPSTASH_REDIS_REST_TOKEN=your-token

# Security
SECRET_KEY=${SECRET_KEY}
JWT_SECRET_KEY=${JWT_SECRET}

# Environment
ENVIRONMENT=production
BACKEND_URL=https://your-app.onrender.com
FRONTEND_URL=https://your-app.vercel.app

# AI Provider
DEFAULT_LLM_PROVIDER=mock

# CORS
CORS_ALLOWED_ORIGINS=https://your-app.vercel.app,http://localhost:3000
EOF
        print_success "Created .env.production"
    else
        print_warning ".env.production already exists, skipping..."
    fi
    
    # Create frontend env
    if [ ! -f "frontend/.env.production" ]; then
        cat > frontend/.env.production <<EOF
# Generated by deploy-to-free-tier.sh
NEXT_PUBLIC_API_URL=https://your-app.onrender.com
NEXT_PUBLIC_APP_URL=https://your-app.vercel.app
NEXTAUTH_URL=https://your-app.vercel.app
NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
EOF
        print_success "Created frontend/.env.production"
    else
        print_warning "frontend/.env.production already exists, skipping..."
    fi
}

# Step 2: Check prerequisites
check_prerequisites() {
    print_info "Checking prerequisites..."
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js is not installed"
        echo "Please install Node.js 18+ from https://nodejs.org"
        exit 1
    fi
    
    # Check npm
    if ! command -v npm &> /dev/null; then
        print_error "npm is not installed"
        exit 1
    fi
    
    # Check Git
    if ! command -v git &> /dev/null; then
        print_error "Git is not installed"
        exit 1
    fi
    
    # Check if repo is clean
    if [[ -n $(git status -s) ]]; then
        print_warning "You have uncommitted changes. Please commit or stash them first."
        read -p "Continue anyway? (y/N) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    print_success "All prerequisites met!"
}

# Step 3: Install dependencies
install_dependencies() {
    print_info "Installing dependencies..."
    
    # Install frontend dependencies
    cd frontend
    if [ ! -d "node_modules" ]; then
        print_info "Installing frontend dependencies..."
        npm install
    else
        print_info "Frontend dependencies already installed"
    fi
    cd ..
    
    # Check Python dependencies
    if command -v python3 &> /dev/null; then
        print_info "Python dependencies should be installed in Docker container"
    fi
    
    print_success "Dependencies checked!"
}

# Step 4: Build check
build_check() {
    print_info "Running build check..."
    
    # Check if frontend dependencies are installed
    if [ ! -d "frontend/node_modules" ]; then
        print_warning "Frontend dependencies not installed. Skipping build check."
        print_info "Run 'cd frontend && npm install' to install dependencies."
    else
        # Test frontend build
        cd frontend
        print_info "Building frontend..."
        if npm run build; then
            print_success "Frontend build successful!"
        else
            print_warning "Frontend build failed. Check for errors."
        fi
        cd ..
    fi
    
    # Test backend
    print_info "Checking backend..."
    if [ -f "Dockerfile" ]; then
        print_success "Backend Dockerfile found!"
    else
        print_error "Backend Dockerfile not found!"
    fi
}

# Step 5: Database setup instructions
database_setup() {
    echo
    print_info "Database Setup Instructions (Neon)"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "1. Go to https://neon.tech"
    echo "2. Sign up with GitHub (no credit card)"
    echo "3. Create a new project:"
    echo "   - Name: prism-db"
    echo "   - Region: Choose closest to you"
    echo "4. Copy the connection string"
    echo "5. Update DATABASE_URL in .env.production"
    echo
    read -p "Press Enter when database is set up..." 
}

# Step 6: Redis setup instructions
redis_setup() {
    echo
    print_info "Redis Setup Instructions (Upstash)"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "1. Go to https://upstash.com"
    echo "2. Sign up with GitHub (no credit card)"
    echo "3. Create a Redis database:"
    echo "   - Name: prism-cache"
    echo "   - Type: Regional"
    echo "   - Region: Choose closest"
    echo "4. Copy REST URL and Token"
    echo "5. Update in .env.production:"
    echo "   - UPSTASH_REDIS_REST_URL"
    echo "   - UPSTASH_REDIS_REST_TOKEN"
    echo
    read -p "Press Enter when Redis is set up..."
}

# Step 7: Initialize database
init_database() {
    print_info "Initialize database?"
    read -p "Do you want to run database migrations? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Load environment
        source .env.production
        
        # Run migrations
        print_info "Running database migrations..."
        cd backend
        alembic upgrade head
        cd ..
        
        print_success "Database initialized!"
    fi
}

# Step 8: Deploy backend
deploy_backend() {
    echo
    print_info "Backend Deployment (Render)"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "1. Go to https://render.com"
    echo "2. Sign up with GitHub"
    echo "3. Click 'New +' → 'Web Service'"
    echo "4. Connect your GitHub repository"
    echo "5. Configure:"
    echo "   - Name: prism-backend"
    echo "   - Root Directory: ./"
    echo "   - Environment: Docker"
    echo "   - Branch: main"
    echo "6. Add environment variables from .env.production"
    echo "7. Click 'Create Web Service'"
    echo
    echo "Note: Copy your Render service URL and update:"
    echo "- BACKEND_URL in .env.production"
    echo "- NEXT_PUBLIC_API_URL in frontend/.env.production"
    echo
    read -p "Press Enter when backend is deployed..."
}

# Step 9: Deploy frontend
deploy_frontend() {
    echo
    print_info "Frontend Deployment (Vercel)"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "1. Go to https://vercel.com"
    echo "2. Sign up with GitHub"
    echo "3. Click 'Add New...' → 'Project'"
    echo "4. Import your repository"
    echo "5. Configure:"
    echo "   - Framework: Next.js"
    echo "   - Root Directory: ./frontend"
    echo "   - Build Command: npm run build"
    echo "6. Add environment variables from frontend/.env.production"
    echo "7. Click 'Deploy'"
    echo
    echo "Note: Copy your Vercel URL and update:"
    echo "- FRONTEND_URL in .env.production"
    echo "- CORS_ALLOWED_ORIGINS in backend"
    echo
    read -p "Press Enter when frontend is deployed..."
}

# Step 10: Post-deployment
post_deployment() {
    echo
    print_success "Deployment Complete! 🎉"
    echo
    print_info "Next Steps:"
    echo "1. Update your Render backend with the Vercel frontend URL"
    echo "2. Test the deployment:"
    echo "   - Frontend: https://your-app.vercel.app"
    echo "   - Backend: https://your-app.onrender.com/docs"
    echo "3. Set up monitoring with UptimeRobot"
    echo "4. Configure GitHub Actions for CI/CD"
    echo
    print_info "Default login credentials:"
    echo "   Email: admin@example.com"
    echo "   Password: Admin123!@#"
    echo
    print_warning "Remember to change the default password!"
}

# Step 11: Create quick reference
create_quick_reference() {
    cat > DEPLOYMENT_URLS.md <<EOF
# PRISM Deployment URLs

Generated on: $(date)

## Production URLs
- Frontend: https://your-app.vercel.app
- Backend API: https://your-app.onrender.com
- API Docs: https://your-app.onrender.com/docs

## Service Dashboards
- Render: https://dashboard.render.com
- Vercel: https://vercel.com/dashboard
- Neon: https://console.neon.tech
- Upstash: https://console.upstash.com

## Monitoring
- Health Check: https://your-app.onrender.com/health
- UptimeRobot: https://uptimerobot.com

## Default Credentials
- Email: admin@example.com
- Password: Admin123!@#

**Remember to update these URLs with your actual deployment URLs!**
EOF
    
    print_success "Created DEPLOYMENT_URLS.md for quick reference"
}

# Main execution flow
main() {
    check_prerequisites
    setup_environment
    install_dependencies
    build_check
    
    echo
    print_info "Ready to deploy to free tier services!"
    echo "This process will guide you through setting up:"
    echo "• Neon (PostgreSQL)"
    echo "• Upstash (Redis)"  
    echo "• Render (Backend)"
    echo "• Vercel (Frontend)"
    echo
    read -p "Continue? (y/N) " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        database_setup
        redis_setup
        init_database
        deploy_backend
        deploy_frontend
        create_quick_reference
        post_deployment
    else
        print_warning "Deployment cancelled"
        exit 1
    fi
}

# Run main
main