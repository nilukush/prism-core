# Default values for PRISM
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  postgresql:
    auth:
      postgresPassword: ""
      database: prism
  redis:
    auth:
      password: ""

# Common labels applied to all resources
commonLabels: {}

# Common annotations applied to all resources
commonAnnotations: {}

# API deployment configuration
api:
  enabled: true
  replicaCount: 3
  
  image:
    repository: prism/prism-api
    pullPolicy: IfNotPresent
    tag: ""
  
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
  
  podSecurityContext:
    fsGroup: 1001
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  
  securityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
    capabilities:
      drop:
      - ALL
  
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
    annotations: {}
  
  ingress:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - host: api.prism.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: prism-api-tls
        hosts:
          - api.prism.example.com
  
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  
  # Autoscaling
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  # Node selector
  nodeSelector: {}
  
  # Tolerations
  tolerations: []
  
  # Affinity
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - prism-api
        topologyKey: kubernetes.io/hostname
  
  # Environment variables
  env:
    - name: ENVIRONMENT
      value: production
    - name: LOG_LEVEL
      value: INFO
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: prism-secrets
          key: database-url
    - name: REDIS_URL
      valueFrom:
        secretKeyRef:
          name: prism-secrets
          key: redis-url
  
  # Extra environment variables
  extraEnv: []
  
  # Extra volumes
  extraVolumes: []
  
  # Extra volume mounts
  extraVolumeMounts: []
  
  # Liveness probe
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  
  # Readiness probe
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1
  
  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 2
  
  # Service account
  serviceAccount:
    create: true
    annotations: {}
    name: ""
    automountServiceAccountToken: true

# Worker deployment configuration
worker:
  enabled: true
  replicaCount: 2
  
  image:
    repository: prism/prism-worker
    pullPolicy: IfNotPresent
    tag: ""
  
  resources:
    limits:
      cpu: 4000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70

# Scheduler deployment configuration
scheduler:
  enabled: true
  replicaCount: 1
  
  image:
    repository: prism/prism-scheduler
    pullPolicy: IfNotPresent
    tag: ""
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    postgresPassword: "changeme"
    database: prism
  primary:
    persistence:
      enabled: true
      size: 100Gi
      storageClass: fast-ssd
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: "changeme"
  master:
    persistence:
      enabled: true
      size: 10Gi
      storageClass: fast-ssd
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 1Gi
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 10Gi
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 1Gi
  sentinel:
    enabled: true
    quorum: 2
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Qdrant configuration (external)
qdrant:
  enabled: false
  url: "http://qdrant:6333"
  apiKey: ""

# External secrets configuration
externalSecrets:
  enabled: false
  backend: vault  # vault, aws, azure, gcp
  backendConfig: {}

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
  prometheusRule:
    enabled: true
    rules: []

# Network policies
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      ports:
      - protocol: TCP
        port: 8000
  egress:
    - to:
      - namespaceSelector: {}
      ports:
      - protocol: TCP
        port: 5432
      - protocol: TCP
        port: 6379
      - protocol: TCP
        port: 6333
    - to:
      - namespaceSelector: {}
      ports:
      - protocol: TCP
        port: 53
      - protocol: UDP
        port: 53
    - to:
      - namespaceSelector: {}
      ports:
      - protocol: TCP
        port: 443

# RBAC configuration
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["secrets", "configmaps"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["pods/log"]
      verbs: ["get", "list"]

# ConfigMap
configMap:
  create: true
  data:
    CORS_ALLOWED_ORIGINS: "*"
    MAX_WORKERS: "10"
    TASK_TIMEOUT: "3600"