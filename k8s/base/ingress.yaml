apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prism-api
  namespace: prism
  labels:
    app.kubernetes.io/name: prism-api
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: prism
  annotations:
    # NGINX Ingress Controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "4k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/limit-burst-multiplier: "2"
    nginx.ingress.kubernetes.io/limit-connections: "50"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: SAMEORIGIN";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';";
    
    # Extended timeouts for AI endpoints
    nginx.ingress.kubernetes.io/server-snippet: |
      location ~ ^/api/v1/ai/ {
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_http_version 1.1;
      }
    
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, PATCH, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type,Authorization,X-Request-ID"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # WebSocket support
    nginx.ingress.kubernetes.io/websocket-services: "prism-api"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    
    # SSL/TLS
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.prism.example.com
    secretName: prism-api-tls
  rules:
  - host: api.prism.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prism-api
            port:
              number: 8000
---
# Canary Ingress for gradual rollouts
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prism-api-canary
  namespace: prism
  labels:
    app.kubernetes.io/name: prism-api
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: prism
    app.kubernetes.io/variant: canary
  annotations:
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-weight: "0"  # Start with 0% traffic
    nginx.ingress.kubernetes.io/canary-by-header: "x-canary"
    nginx.ingress.kubernetes.io/canary-by-header-value: "always"
    nginx.ingress.kubernetes.io/canary-by-cookie: "canary"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.prism.example.com
    secretName: prism-api-tls
  rules:
  - host: api.prism.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prism-api-canary
            port:
              number: 8000