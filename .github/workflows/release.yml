name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build Python package
      run: |
        cd backend
        python -m build
    
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
        tar -czf ../prism-frontend-${{ github.event.inputs.version || github.ref_name }}.tar.gz out/
    
    - name: Create release archives
      run: |
        tar -czf prism-backend-${{ github.event.inputs.version || github.ref_name }}.tar.gz \
          --exclude='frontend' \
          --exclude='__pycache__' \
          --exclude='.git' \
          --exclude='*.log' \
          --exclude='uploads' \
          backend/ requirements*.txt Dockerfile docker-compose*.yml
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          prism-backend-*.tar.gz
          prism-frontend-*.tar.gz
          backend/dist/*

  create-release:
    name: Create GitHub Release
    needs: build-artifacts
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "## What's Changed" > changelog.md
        git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"* %s by @%an" >> changelog.md
        echo "" >> changelog.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${{ github.event.inputs.version || github.ref_name }}" >> changelog.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: Release ${{ github.event.inputs.version || github.ref_name }}
        body_path: changelog.md
        draft: false
        prerelease: ${{ contains(github.event.inputs.version || github.ref_name, '-rc') || contains(github.event.inputs.version || github.ref_name, '-beta') || contains(github.event.inputs.version || github.ref_name, '-alpha') }}
        files: |
          prism-backend-*.tar.gz
          prism-frontend-*.tar.gz
          backend/dist/*

  publish-docker:
    name: Publish Docker Images
    needs: build-artifacts
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/prism
          ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}-backend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  publish-pypi:
    name: Publish to PyPI
    needs: create-release
    runs-on: ubuntu-latest
    if: "!contains(github.event.inputs.version || github.ref_name, '-rc') && !contains(github.event.inputs.version || github.ref_name, '-beta') && !contains(github.event.inputs.version || github.ref_name, '-alpha')"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        cd backend
        python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        cd backend
        twine upload dist/*